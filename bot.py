import telebot
from telebot import types
import json
import os
import hashlib
from requests.exceptions import ConnectionError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '8257960150:AAEUC_EhgdOwFrIDKrfQ-iwn-jo0hlUxrhQ'
ADMIN_USERNAME = 'pleer'

class ShopBot:
    def __init__(self):
        self.bot = telebot.TeleBot(TOKEN)
        self.data_files = {
            'users': 'users.json',
            'shop': 'shop.json',
            'premium_shop': 'premium_shop.json',
            'auction': 'auction.json',
            'storage': 'storage.json',
            'pass': 'pass.json'
        }
        self.setup_handlers()
        self.initialize_data()

    def initialize_data(self):
        if not all(os.path.exists(f) for f in self.data_files.values()):
            self.reset_all_data()

    def reset_all_data(self):
        default_data = {
            'users': {},
            'shop': {
                "express_plus": {"name": "–≠–∫—Å–ø—Ä–µ—Å—Å+", "price": 10000, "description": "–î–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º –∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º"}
            },
            'premium_shop': {
                "premium": {"name": "Premium", "price": 15000, "description": "–ö—ç—à–±—ç–∫ 5%", "type": "subscription"},
                "platinum": {"name": "Platinum", "price": 25000, "description": "–ö—ç—à–±—ç–∫ 10%", "type": "subscription"},
                "silver": {"name": "Silver", "price": 50000, "description": "–ö—ç—à–±—ç–∫ 15% + –±–æ–Ω—É—Å—ã", "type": "subscription"},
                "gold": {"name": "Gold", "price": 100000, "description": "–ö—ç—à–±—ç–∫ 25% + –≤—Å–µ –±–æ–Ω—É—Å—ã", "type": "subscription"},
                "super_pass": {"name": "–°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫", "price": 15000, "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", "type": "pass"}
            },
            'auction': {
                "1": {"name": "–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç", "price": 5000, "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–∞"}
            },
            'storage': {},
            'pass': {
                "levels": [
                    {"points_required": 10, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(1, 11)]},
                    {"points_required": 15, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(11, 21)]},
                    {"points_required": 15, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(21, 31)]},
                    {"points_required": 20, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(31, 41)]}
                ],
                "super_rewards": [8, 9, 10, 19, 20, 28, 29, 30, 39, 40],
                "luckydrops": ["–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç 1", "–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç 2", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"]
            }
        }
        
        for key, filename in self.data_files.items():
            self.save_data(default_data[key], filename)

    def load_data(self, filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_data(self, data, filename):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start', 'reset'])
        def handle_start(message):
            if message.text == '/reset' and self.is_admin(message.from_user.id):
                self.reset_all_data()
                self.bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")
                return
            
            user_id = str(message.from_user.id)
            if self.get_user(user_id):
                self.show_main_menu(message.chat.id, self.is_admin(user_id))
            else:
                msg = self.bot.send_message(message.chat.id, "üîê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:\n–õ–æ–≥–∏–Ω –ü–∞—Ä–æ–ª—å\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: Ivan 12345)")
                self.bot.register_next_step_handler(msg, self.process_registration)

        @self.bot.message_handler(func=lambda m: m.text in ["üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", "üíé –ü—Ä–µ–º–∏—É–º", "üèÜ –ê—É–∫—Ü–∏–æ–Ω"])
        def handle_shop(message):
            user_id = str(message.from_user.id)
            user = self.get_user(user_id)
            
            if not user:
                self.bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
                return
            
            if message.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω":
                self.show_shop_menu(message.chat.id)
            elif message.text == "üíé –ü—Ä–µ–º–∏—É–º":
                if not user['express_plus']:
                    self.bot.send_message(message.chat.id, "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–µ–Ω –≠–∫—Å–ø—Ä–µ—Å—Å+!")
                    return
                self.show_premium_menu(message.chat.id)
            elif message.text == "üèÜ –ê—É–∫—Ü–∏–æ–Ω":
                if not user['express_plus']:
                    self.bot.send_message(message.chat.id, "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω—É–∂–µ–Ω –≠–∫—Å–ø—Ä–µ—Å—Å+!")
                    return
                self.show_auction_menu(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
        def handle_purchase(call):
            user_id = str(call.from_user.id)
            user = self.get_user(user_id)
            
            if not user:
                self.bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
                return
            
            parts = call.data.split('_')
            shop_type = parts[1]
            item_id = parts[2]
            
            shop_data = self.load_data(self.data_files[shop_type + ('_shop' if shop_type != 'shop' else '')])
            
            if item_id not in shop_data:
                self.bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            item = shop_data[item_id]
            
            if user['balance'] < item['price']:
                self.bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–ë!")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
            update_data = {'balance': user['balance'] - item['price']}
            
            if shop_type == 'shop' and item_id == 'express_plus':
                update_data['express_plus'] = True
                msg = "‚úÖ –≠–∫—Å–ø—Ä–µ—Å—Å+ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            elif shop_type == 'premium':
                if item['type'] == 'subscription':
                    update_data['subscription'] = item_id.upper()
                    msg = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {item['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!"
                elif item['type'] == 'pass':
                    update_data['super_pass'] = True
                    msg = "‚úÖ –°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            else:
                self.add_to_storage(user_id, item['name'])
                msg = f"‚úÖ –¢–æ–≤–∞—Ä '{item['name']}' –∫—É–ø–ª–µ–Ω!"
            
            self.update_user(user_id, update_data)
            self.bot.answer_callback_query(call.id, msg)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            if shop_type == 'shop':
                self.show_shop_menu(call.message.chat.id, call.message.message_id)
            elif shop_type == 'premium':
                self.show_premium_menu(call.message.chat.id, call.message.message_id)
            elif shop_type == 'auction':
                self.show_auction_menu(call.message.chat.id, call.message.message_id)

    def show_main_menu(self, chat_id, is_admin=False):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
        if is_admin:
            markup.row("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        else:
            markup.row("üèÜ –ê—É–∫—Ü–∏–æ–Ω", "üíé –ü—Ä–µ–º–∏—É–º")
        markup.row("üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ", "üé´ –ü—Ä–æ–ø—É—Å–∫")
        markup.row("üîÅ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        self.bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

    def show_shop_menu(self, chat_id, message_id=None):
        markup = types.InlineKeyboardMarkup()
        shop_items = self.load_data(self.data_files['shop'])
        for item_id, item in shop_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"buy_shop_{item_id}"
            ))
        
        if message_id:
            self.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)
        else:
            self.bot.send_message(chat_id, "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

    def show_premium_menu(self, chat_id, message_id=None):
        markup = types.InlineKeyboardMarkup()
        premium_items = self.load_data(self.data_files['premium_shop'])
        for item_id, item in premium_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"buy_premium_{item_id}"
            ))
        
        if message_id:
            self.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)
        else:
            self.bot.send_message(chat_id, "üíé –ü—Ä–µ–º–∏—É–º –º–∞–≥–∞–∑–∏–Ω:", reply_markup=markup)

    def show_auction_menu(self, chat_id, message_id=None):
        markup = types.InlineKeyboardMarkup()
        auction_items = self.load_data(self.data_files['auction'])
        for item_id, item in auction_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"buy_auction_{item_id}"
            ))
        
        if message_id:
            self.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)
        else:
            self.bot.send_message(chat_id, "üèÜ –ê—É–∫—Ü–∏–æ–Ω:", reply_markup=markup)

    def get_user(self, user_id):
        users = self.load_data(self.data_files['users'])
        return users.get(user_id)

    def update_user(self, user_id, data):
        users = self.load_data(self.data_files['users'])
        if user_id in users:
            users[user_id].update(data)
            self.save_data(users, self.data_files['users'])
            return True
        return False

    def add_to_storage(self, user_id, item):
        storage = self.load_data(self.data_files['storage'])
        if user_id not in storage:
            storage[user_id] = []
        storage[user_id].append(item)
        self.save_data(storage, self.data_files['storage'])

    def is_admin(self, user_id):
        user = self.get_user(str(user_id))
        return user and user.get('is_admin', False)

    def process_registration(self, message):
        try:
            username, password = message.text.split(maxsplit=1)
            user_id = str(message.from_user.id)
            
            users = self.load_data(self.data_files['users'])
            is_admin = username.lower() == ADMIN_USERNAME
            
            users[user_id] = {
                'username': username,
                'password': hashlib.sha256(password.encode()).hexdigest(),
                'balance': 1000000 if is_admin else 0,
                'express_plus': is_admin,
                'subscription': 'GOLD' if is_admin else 'None',
                'super_pass': is_admin,
                'pass_points': 0,
                'pass_level': 1,
                'luckydrop_points': 0,
                'is_admin': is_admin,
                'storage': []
            }
            
            self.save_data(users, self.data_files['users'])
            
            if is_admin:
                self.bot.send_message(message.chat.id, f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=self.get_admin_menu())
            else:
                self.show_main_menu(message.chat.id)
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

    def get_admin_menu(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        markup.row("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –≠–ë", "üí∏ –°–ø–∏—Å–∞—Ç—å –≠–ë")
        markup.row("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–º", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")
        markup.row("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        markup.row("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return markup

    def run(self):
        while True:
            try:
                print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                self.bot.polling(none_stop=True, interval=1, timeout=30)
            except ConnectionError:
                print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
                time.sleep(10)
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
                time.sleep(30)

if __name__ == '__main__':
    bot = ShopBot()
    bot.run()
