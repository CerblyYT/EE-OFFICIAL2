import telebot
from telebot import types
import json
import os
import time
import hashlib
import random
from requests.exceptions import ConnectionError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '8257960150:AAEUC_EhgdOwFrIDKrfQ-iwn-jo0hlUxrhQ'
ADMIN_USERNAME = 'pleer'
DATA_FILES = {
    'users': 'users.json',
    'shop': 'shop.json',
    'premium_shop': 'premium_shop.json',
    'auction': 'auction.json',
    'storage': 'storage.json',
    'pass': 'pass.json'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

class DataManager:
    @staticmethod
    def load(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    @staticmethod
    def save(data, filename):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)

    @staticmethod
    def reset_all():
        default_data = {
            'users': {},
            'shop': {
                "express_plus": {"name": "–≠–∫—Å–ø—Ä–µ—Å—Å+", "price": 10000, "description": "–î–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º –∏ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º"}
            },
            'premium_shop': {
                "premium": {"name": "Premium", "price": 15000, "description": "–ö—ç—à–±—ç–∫ 5%", "type": "subscription"},
                "platinum": {"name": "Platinum", "price": 25000, "description": "–ö—ç—à–±—ç–∫ 10%", "type": "subscription"},
                "silver": {"name": "Silver", "price": 50000, "description": "–ö—ç—à–±—ç–∫ 15% + –±–æ–Ω—É—Å—ã", "type": "subscription"},
                "gold": {"name": "Gold", "price": 100000, "description": "–ö—ç—à–±—ç–∫ 25% + –≤—Å–µ –±–æ–Ω—É—Å—ã", "type": "subscription"},
                "super_pass": {"name": "–°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫", "price": 15000, "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã", "type": "pass"}
            },
            'auction': {
                "1": {"name": "–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç", "price": 5000, "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∞—É–∫—Ü–∏–æ–Ω–∞"}
            },
            'storage': {},
            'pass': {
                "levels": [
                    {"points_required": 10, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(1, 11)]},
                    {"points_required": 15, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(11, 21)]},
                    {"points_required": 15, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(21, 31)]},
                    {"points_required": 20, "rewards": [f"–û–±—ã—á–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ {i}" for i in range(31, 41)]}
                ],
                "super_rewards": [8, 9, 10, 19, 20, 28, 29, 30, 39, 40],
                "luckydrops": ["–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç 1", "–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç 2", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"]
            }
        }
        
        for key, filename in DATA_FILES.items():
            DataManager.save(default_data[key], filename)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if not all(os.path.exists(f) for f in DATA_FILES.values()):
    DataManager.reset_all()

class UserManager:
    @staticmethod
    def register(user_id, username, password):
        users = DataManager.load(DATA_FILES['users'])
        is_admin = username.lower() == ADMIN_USERNAME
        
        users[user_id] = {
            'username': username,
            'password': hashlib.sha256(password.encode()).hexdigest(),
            'balance': 1000000 if is_admin else 0,
            'express_plus': is_admin,
            'subscription': 'GOLD' if is_admin else 'None',
            'super_pass': is_admin,
            'pass_points': 0,
            'pass_level': 1,
            'luckydrop_points': 0,
            'is_admin': is_admin,
            'storage': []
        }
        
        DataManager.save(users, DATA_FILES['users'])
        return users[user_id]

    @staticmethod
    def get_user(user_id):
        users = DataManager.load(DATA_FILES['users'])
        return users.get(user_id)

    @staticmethod
    def update_user(user_id, data):
        users = DataManager.load(DATA_FILES['users'])
        if user_id in users:
            users[user_id].update(data)
            DataManager.save(users, DATA_FILES['users'])
            return True
        return False

    @staticmethod
    def get_all_users():
        return DataManager.load(DATA_FILES['users'])

    @staticmethod
    def add_to_storage(user_id, item):
        storage = DataManager.load(DATA_FILES['storage'])
        if user_id not in storage:
            storage[user_id] = []
        storage[user_id].append(item)
        DataManager.save(storage, DATA_FILES['storage'])

class KeyboardManager:
    @staticmethod
    def main_menu(is_admin=False):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
        if is_admin:
            markup.row("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        else:
            markup.row("üèÜ –ê—É–∫—Ü–∏–æ–Ω", "üíé –ü—Ä–µ–º–∏—É–º")
        markup.row("üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ", "üé´ –ü—Ä–æ–ø—É—Å–∫")
        markup.row("üîÅ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        return markup

    @staticmethod
    def admin_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
        markup.row("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –≠–ë", "üí∏ –°–ø–∏—Å–∞—Ç—å –≠–ë")
        markup.row("üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–º", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")
        markup.row("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        markup.row("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return markup

    @staticmethod
    def admin_shop_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä", "–£–¥–∞–ª–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä")
        markup.row("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä")
        markup.row("–î–æ–±–∞–≤–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç", "–£–¥–∞–ª–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç")
        markup.row("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return markup

    @staticmethod
    def admin_subscription_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("–í—ã–¥–∞—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å+", "–í—ã–¥–∞—Ç—å –°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫")
        markup.row("–í—ã–¥–∞—Ç—å Premium", "–í—ã–¥–∞—Ç—å Platinum")
        markup.row("–í—ã–¥–∞—Ç—å Silver", "–í—ã–¥–∞—Ç—å GOLD")
        markup.row("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return markup

    @staticmethod
    def back_to_menu(is_admin=False):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return markup

    @staticmethod
    def shop_menu():
        markup = types.InlineKeyboardMarkup()
        shop_items = DataManager.load(DATA_FILES['shop'])
        for item_id, item in shop_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"shop_{item_id}"
            ))
        return markup

    @staticmethod
    def premium_shop_menu():
        markup = types.InlineKeyboardMarkup()
        premium_items = DataManager.load(DATA_FILES['premium_shop'])
        for item_id, item in premium_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"premium_{item_id}"
            ))
        return markup

    @staticmethod
    def auction_menu():
        markup = types.InlineKeyboardMarkup()
        auction_items = DataManager.load(DATA_FILES['auction'])
        for item_id, item in auction_items.items():
            markup.add(types.InlineKeyboardButton(
                text=f"{item['name']} - {item['price']} –≠–ë",
                callback_data=f"auction_{item_id}"
            ))
        return markup

    @staticmethod
    def storage_menu(user_id):
        markup = types.InlineKeyboardMarkup()
        storage = DataManager.load(DATA_FILES['storage']).get(user_id, [])
        for i, item in enumerate(storage, 1):
            markup.add(types.InlineKeyboardButton(
                text=f"{i}. {item}",
                callback_data=f"view_item_{i}"
            ))
        markup.add(types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", callback_data="clear_storage"))
        return markup

    @staticmethod
    def admin_storage_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        markup.row("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        markup.row("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return markup

    @staticmethod
    def admin_pass_menu():
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row("–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏", "–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
        markup.row("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", "–î–æ–±–∞–≤–∏—Ç—å –ª–∞–∫–∏–¥—Ä–æ–ø")
        markup.row("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return markup

class BotHandler:
    @staticmethod
    def show_main_menu(chat_id, is_admin=False):
        bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=KeyboardManager.main_menu(is_admin))

    @staticmethod
    @bot.message_handler(commands=['start', 'reset'])
    def handle_start(message):
        if message.text == '/reset' and UserManager.get_user(str(message.from_user.id)) and UserManager.get_user(str(message.from_user.id))['is_admin']:
            DataManager.reset_all()
            bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!")
            return
        
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if user:
            BotHandler.show_main_menu(message.chat.id, user['is_admin'])
        else:
            msg = bot.send_message(message.chat.id, "üîê –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ:\n–õ–æ–≥–∏–Ω –ü–∞—Ä–æ–ª—å\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: Ivan 12345)")
            bot.register_next_step_handler(msg, BotHandler.process_registration)

    @staticmethod
    @bot.message_handler(commands=['login'])
    def handle_login(message):
        user_id = str(message.from_user.id)
        msg = bot.send_message(message.chat.id, "üîê –î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n–õ–æ–≥–∏–Ω –ü–∞—Ä–æ–ª—å\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: Ivan 12345)", 
                             reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, BotHandler.process_login)

    @staticmethod
    def process_login(message):
        try:
            username, password = message.text.split(maxsplit=1)
            user_id = str(message.from_user.id)
            users = DataManager.load(DATA_FILES['users'])
            
            for uid, user_data in users.items():
                if (user_data['username'] == username and 
                    user_data['password'] == hashlib.sha256(password.encode()).hexdigest()):
                    users[user_id] = user_data
                    if uid != user_id:
                        del users[uid]
                    DataManager.save(users, DATA_FILES['users'])
                    
                    if users[user_id]['is_admin']:
                        bot.send_message(message.chat.id, f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", 
                                       reply_markup=KeyboardManager.admin_menu())
                    else:
                        BotHandler.show_main_menu(message.chat.id)
                    return
            
            msg = bot.send_message(message.chat.id, "üîê –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è? (–¥–∞/–Ω–µ—Ç)")
            bot.register_next_step_handler(msg, lambda m: BotHandler.handle_register_prompt(m, username, password))
            
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /login")

    @staticmethod
    def handle_register_prompt(message, username, password):
        if message.text.lower() in ['–¥–∞', 'yes']:
            user_id = str(message.from_user.id)
            user = UserManager.register(user_id, username, password)
            if user['is_admin']:
                bot.send_message(message.chat.id, f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", 
                               reply_markup=KeyboardManager.admin_menu())
            else:
                BotHandler.show_main_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üîÅ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    def handle_switch_account(message):
        BotHandler.handle_login(message)

    @staticmethod
    def process_registration(message):
        try:
            username, password = message.text.split(maxsplit=1)
            user_id = str(message.from_user.id)
            
            user = UserManager.register(user_id, username, password)
            if user['is_admin']:
                bot.send_message(message.chat.id, f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=KeyboardManager.admin_menu())
            else:
                BotHandler.show_main_menu(message.chat.id)
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    def show_profile(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        profile_text = (
            f"‚ú® –ò–º—è: {user['username']}\n"
            f"üíµ –ë–∞–ª–∞–Ω—Å: {user['balance']} –≠–ë\n"
            f"‚òÑÔ∏è –≠–∫—Å–ø—Ä–µ—Å—Å+: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user['express_plus'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
            f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {user['subscription']}\n"
            f"üí† –°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if user['super_pass'] else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        
        bot.send_message(message.chat.id, profile_text, reply_markup=KeyboardManager.back_to_menu(user['is_admin']))

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω")
    def show_shop(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        bot.send_message(message.chat.id, "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=KeyboardManager.shop_menu())

    @staticmethod
    @bot.callback_query_handler(func=lambda call: call.data.startswith('shop_'))
    def handle_shop_callback(call):
        user_id = str(call.from_user.id)
        user = UserManager.get_user(user_id)
        item_id = call.data.split('_')[1]
        
        shop_items = DataManager.load(DATA_FILES['shop'])
        if item_id not in shop_items:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        item = shop_items[item_id]
        if user['balance'] < item['price']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–ë!")
            return
        
        if item_id == "express_plus":
            UserManager.update_user(user_id, {'express_plus': True, 'balance': user['balance'] - item['price']})
            bot.answer_callback_query(call.id, "‚úÖ –≠–∫—Å–ø—Ä–µ—Å—Å+ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            UserManager.update_user(user_id, {'balance': user['balance'] - item['price']})
            UserManager.add_to_storage(user_id, item['name'])
            bot.answer_callback_query(call.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['name']}!")
        
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=KeyboardManager.shop_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üíé –ü—Ä–µ–º–∏—É–º")
    def show_premium_shop(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        if not user['express_plus']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å+ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º –º–∞–≥–∞–∑–∏–Ω—É!")
            return
        
        bot.send_message(message.chat.id, "üíé –ü—Ä–µ–º–∏—É–º –º–∞–≥–∞–∑–∏–Ω:", reply_markup=KeyboardManager.premium_shop_menu())

    @staticmethod
    @bot.callback_query_handler(func=lambda call: call.data.startswith('premium_'))
    def handle_premium_shop_callback(call):
        user_id = str(call.from_user.id)
        user = UserManager.get_user(user_id)
        item_id = call.data.split('_')[1]
        
        premium_items = DataManager.load(DATA_FILES['premium_shop'])
        if item_id not in premium_items:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        item = premium_items[item_id]
        if user['balance'] < item['price']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–ë!")
            return
        
        update_data = {'balance': user['balance'] - item['price']}
        if item['type'] == 'subscription':
            update_data['subscription'] = item_id.upper()
        elif item['type'] == 'pass':
            update_data['super_pass'] = True
        
        UserManager.update_user(user_id, update_data)
        bot.answer_callback_query(call.id, f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item['name']}!")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=KeyboardManager.premium_shop_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üèÜ –ê—É–∫—Ü–∏–æ–Ω")
    def show_auction(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        if not user['express_plus']:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å+ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–∫—Ü–∏–æ–Ω—É!")
            return
        
        bot.send_message(message.chat.id, "üèÜ –ê—É–∫—Ü–∏–æ–Ω:", reply_markup=KeyboardManager.auction_menu())

    @staticmethod
    @bot.callback_query_handler(func=lambda call: call.data.startswith('auction_'))
    def handle_auction_callback(call):
        user_id = str(call.from_user.id)
        user = UserManager.get_user(user_id)
        item_id = call.data.split('_')[1]
        
        auction_items = DataManager.load(DATA_FILES['auction'])
        if item_id not in auction_items:
            bot.answer_callback_query(call.id, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        item = auction_items[item_id]
        if user['balance'] < item['price']:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≠–ë!")
            return
        
        UserManager.update_user(user_id, {'balance': user['balance'] - item['price']})
        UserManager.add_to_storage(user_id, item['name'])
        bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π: {item['name']}!")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=KeyboardManager.auction_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ")
    def show_storage(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        storage = DataManager.load(DATA_FILES['storage']).get(user_id, [])
        if not storage:
            bot.send_message(message.chat.id, "üì≠ –í–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ", reply_markup=KeyboardManager.back_to_menu(user['is_admin']))
            return
        
        storage_text = "üì¶ –í–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:\n\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(storage))
        bot.send_message(message.chat.id, storage_text, reply_markup=KeyboardManager.storage_menu(user_id))

    @staticmethod
    @bot.callback_query_handler(func=lambda call: call.data.startswith('view_item_'))
    def handle_view_item(call):
        user_id = str(call.from_user.id)
        storage = DataManager.load(DATA_FILES['storage']).get(user_id, [])
        item_index = int(call.data.split('_')[2]) - 1
        
        if 0 <= item_index < len(storage):
            bot.answer_callback_query(call.id, f"üîç {storage[item_index]}")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    @staticmethod
    @bot.callback_query_handler(func=lambda call: call.data == "clear_storage")
    def handle_clear_storage(call):
        user_id = str(call.from_user.id)
        storage = DataManager.load(DATA_FILES['storage'])
        if user_id in storage and storage[user_id]:
            storage[user_id] = []
            DataManager.save(storage, DATA_FILES['storage'])
            bot.answer_callback_query(call.id, "‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ!")
            bot.edit_message_text("üì≠ –í–∞—à–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ", call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –ø—É—Å—Ç–æ!")

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üé´ –ü—Ä–æ–ø—É—Å–∫")
    def show_pass(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        pass_data = DataManager.load(DATA_FILES['pass'])
        current_level = user['pass_level']
        level_info = pass_data['levels'][current_level-1] if current_level <= len(pass_data['levels']) else None
        
        pass_text = (
            f"üé´ –í–∞—à –ø—Ä–æ–ø—É—Å–∫:\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {current_level}/{len(pass_data['levels'])}\n"
            f"‚≠ê –û—á–∫–∏: {user['pass_points']}/{level_info['points_required'] if level_info else 'MAX'}\n"
            f"üçÄ –û—á–∫–∏ –ª–∞–∫–∏–¥—Ä–æ–ø–æ–≤: {user['luckydrop_points']}/30\n\n"
            f"–¢–µ–∫—É—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã:\n"
        )
        
        if level_info:
            for i, reward in enumerate(level_info['rewards'], 1):
                reward_emoji = "‚ú®" if i in pass_data['super_rewards'] and user['super_pass'] else "‚Ä¢"
                pass_text += f"{reward_emoji} {reward}\n"
        
        bot.send_message(message.chat.id, pass_text, reply_markup=KeyboardManager.back_to_menu(user['is_admin']))

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    def show_admin_panel(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
            return
        
        bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"])
    def handle_shop_management(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        bot.send_message(message.chat.id, "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–º:", reply_markup=KeyboardManager.admin_shop_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –≠–ë")
    def add_balance(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, BotHandler.process_add_balance)

    @staticmethod
    def process_add_balance(message):
        try:
            target_id, amount = message.text.split()
            amount = int(amount)
            
            users = UserManager.get_all_users()
            if target_id in users:
                users[target_id]['balance'] += amount
                DataManager.save(users, DATA_FILES['users'])
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[target_id]['username']} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –≠–ë", reply_markup=KeyboardManager.admin_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=KeyboardManager.admin_menu())
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üí∏ –°–ø–∏—Å–∞—Ç—å –≠–ë")
    def remove_balance(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, BotHandler.process_remove_balance)

    @staticmethod
    def process_remove_balance(message):
        try:
            target_id, amount = message.text.split()
            amount = int(amount)
            
            users = UserManager.get_all_users()
            if target_id in users:
                if users[target_id]['balance'] >= amount:
                    users[target_id]['balance'] -= amount
                    DataManager.save(users, DATA_FILES['users'])
                    bot.send_message(message.chat.id, f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {users[target_id]['username']} —Å–ø–∏—Å–∞–Ω–æ {amount} –≠–ë", reply_markup=KeyboardManager.admin_menu())
                else:
                    bot.send_message(message.chat.id, "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", reply_markup=KeyboardManager.admin_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=KeyboardManager.admin_menu())
        except:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text in [
        "–î–æ–±–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä", "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä", "–î–æ–±–∞–≤–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç",
        "–£–¥–∞–ª–∏—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä", "–£–¥–∞–ª–∏—Ç—å –∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç"
    ])
    def handle_item_management(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        action = "add" if "–î–æ–±–∞–≤–∏—Ç—å" in message.text else "remove"
        shop_type = {
            "–æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä": "shop",
            "–ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä": "premium_shop",
            "–∞—É–∫—Ü–∏–æ–Ω –ª–æ—Ç": "auction"
        }[message.text.split()[1] + " " + message.text.split()[2]]
        
        if action == "add":
            if shop_type == "premium_shop":
                text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID_—Ç–æ–≤–∞—Ä–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞ –û–ø–∏—Å–∞–Ω–∏–µ –¢–∏–ø\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: premium Premium 15000 –ö—ç—à–±—ç–∫ 5% subscription)"
            else:
                text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\nID_—Ç–æ–≤–∞—Ä–∞ –ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞ –û–ø–∏—Å–∞–Ω–∏–µ\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: express_plus –≠–∫—Å–ø—Ä–µ—Å—Å+ 10000 –î–æ—Å—Ç—É–ø –∫ –∞—É–∫—Ü–∏–æ–Ω–∞–º)"
            
            msg = bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, lambda m: process_add_item(m, shop_type))
        else:
            data = DataManager.load(DATA_FILES[shop_type])
            if not data:
                bot.send_message(message.chat.id, f"‚ùå –í {shop_type} –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=KeyboardManager.admin_shop_menu())
                return
            
            items_text = "\n".join(f"{id}: {item['name']}" for id, item in data.items())
            msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{items_text}", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, lambda m: process_remove_item(m, shop_type))

    def process_add_item(message, shop_type):
        try:
            parts = message.text.split(maxsplit=3)
            if shop_type == 'premium_shop':
                if len(parts) < 4:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                item_id, name, price, description = parts[0], parts[1], int(parts[2]), parts[3]
                item_type = description.split()[-1]
                description = ' '.join(description.split()[:-1])
                item = {
                    "name": name,
                    "price": price,
                    "description": description,
                    "type": item_type
                }
            else:
                if len(parts) < 3:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                item_id, name, price, *description = parts[0], parts[1], int(parts[2]), ' '.join(parts[3:]) if len(parts) > 3 else ""
                item = {
                    "name": name,
                    "price": price,
                    "description": description
                }
            
            data = DataManager.load(DATA_FILES[shop_type])
            data[item_id] = item
            DataManager.save(data, DATA_FILES[shop_type])
            bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ {'–¥–æ–±–∞–≤–ª–µ–Ω' if shop_type != 'auction' else '–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω'} –≤ {shop_type}!", reply_markup=KeyboardManager.admin_shop_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=KeyboardManager.admin_shop_menu())

    def process_remove_item(message, shop_type):
        try:
            item_id = message.text.strip()
            data = DataManager.load(DATA_FILES[shop_type])
            
            if item_id in data:
                del data[item_id]
                DataManager.save(data, DATA_FILES[shop_type])
                bot.send_message(message.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ {shop_type}!", reply_markup=KeyboardManager.admin_shop_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=KeyboardManager.admin_shop_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_shop_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    def show_user_list(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        users = UserManager.get_all_users()
        if not users:
            bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", reply_markup=KeyboardManager.admin_menu())
            return
        
        users_text = "üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n" + "\n".join(
            f"ID: {uid} | –ò–º—è: {data['username']} | –ë–∞–ª–∞–Ω—Å: {data['balance']} –≠–ë"
            for uid, data in users.items()
        )
        
        for i in range(0, len(users_text), 4096):
            bot.send_message(message.chat.id, users_text[i:i+4096], reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    def start_broadcast(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, BotHandler.process_broadcast)

    @staticmethod
    def process_broadcast(message):
        users = UserManager.get_all_users()
        success = 0
        failed = 0
        
        for user_id in users:
            try:
                bot.send_message(user_id, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
                success += 1
            except:
                failed += 1
        
        bot.send_message(message.chat.id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {success}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–º")
    def manage_pass(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        bot.send_message(message.chat.id, "üé´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–º:", reply_markup=KeyboardManager.admin_pass_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º")
    def manage_storage(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        bot.send_message(message.chat.id, "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º:", reply_markup=KeyboardManager.admin_storage_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text in [
        "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "–û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
    ])
    def handle_storage_management(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        if message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_view_storage_admin)
        elif message.text == "–û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_clear_storage_admin)
        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_add_item_storage_admin)
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:", reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, process_select_user_for_remove_item)

    def process_view_storage_admin(message):
        try:
            target_id = message.text.strip()
            storage = DataManager.load(DATA_FILES['storage'])
            
            if target_id in storage and storage[target_id]:
                items_text = "üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" + "\n".join(f"{i+1}. {item}" for i, item in enumerate(storage[target_id]))
                bot.send_message(message.chat.id, items_text, reply_markup=KeyboardManager.admin_storage_menu())
            else:
                bot.send_message(message.chat.id, "üì≠ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ", reply_markup=KeyboardManager.admin_storage_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_storage_menu())

    def process_clear_storage_admin(message):
        try:
            target_id = message.text.strip()
            storage = DataManager.load(DATA_FILES['storage'])
            
            if target_id in storage and storage[target_id]:
                storage[target_id] = []
                DataManager.save(storage, DATA_FILES['storage'])
                bot.send_message(message.chat.id, "‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ!", reply_markup=KeyboardManager.admin_storage_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—É—Å—Ç–æ!", reply_markup=KeyboardManager.admin_storage_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_storage_menu())

    def process_add_item_storage_admin(message):
        try:
            target_id, item = message.text.split(maxsplit=1)
            storage = DataManager.load(DATA_FILES['storage'])
            
            if target_id not in storage:
                storage[target_id] = []
            
            storage[target_id].append(item)
            DataManager.save(storage, DATA_FILES['storage'])
            bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{item}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", reply_markup=KeyboardManager.admin_storage_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_storage_menu())

    def process_select_user_for_remove_item(message):
        try:
            target_id = message.text.strip()
            storage = DataManager.load(DATA_FILES['storage'])
            
            if target_id in storage and storage[target_id]:
                items_text = "\n".join(f"{i+1}. {item}" for i, item in enumerate(storage[target_id]))
                msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{items_text}", reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(msg, lambda m: process_remove_item_storage_admin(m, target_id))
            else:
                bot.send_message(message.chat.id, "‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ!", reply_markup=KeyboardManager.admin_storage_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_storage_menu())

    def process_remove_item_storage_admin(message, target_id):
        try:
            item_index = int(message.text.strip()) - 1
            storage = DataManager.load(DATA_FILES['storage'])
            
            if 0 <= item_index < len(storage[target_id]):
                removed_item = storage[target_id].pop(item_index)
                DataManager.save(storage, DATA_FILES['storage'])
                bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{removed_item}' —É–¥–∞–ª–µ–Ω –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞!", reply_markup=KeyboardManager.admin_storage_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞!", reply_markup=KeyboardManager.admin_storage_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_storage_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text in [
        "–í—ã–¥–∞—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å+", "–í—ã–¥–∞—Ç—å –°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫",
        "–í—ã–¥–∞—Ç—å Premium", "–í—ã–¥–∞—Ç—å Platinum", "–í—ã–¥–∞—Ç—å Silver", "–í—ã–¥–∞—Ç—å GOLD"
    ])
    def handle_give_subscription(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        subscription_type = {
            "–í—ã–¥–∞—Ç—å –≠–∫—Å–ø—Ä–µ—Å—Å+": "express_plus",
            "–í—ã–¥–∞—Ç—å –°—É–ø–µ—Ä –ü—Ä–æ–ø—É—Å–∫": "super_pass",
            "–í—ã–¥–∞—Ç—å Premium": "premium",
            "–í—ã–¥–∞—Ç—å Platinum": "platinum",
            "–í—ã–¥–∞—Ç—å Silver": "silver",
            "–í—ã–¥–∞—Ç—å GOLD": "gold"
        }[message.text]
        
        msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ {message.text.split()[1]}:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: process_give_subscription(m, subscription_type))

    def process_give_subscription(message, sub_type):
        try:
            target_id = message.text.strip()
            users = UserManager.get_all_users()
            
            if target_id in users:
                if sub_type == "express_plus":
                    users[target_id]['express_plus'] = True
                elif sub_type == "super_pass":
                    users[target_id]['super_pass'] = True
                else:
                    users[target_id]['subscription'] = sub_type.upper()
                
                DataManager.save(users, DATA_FILES['users'])
                bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {users[target_id]['username']} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_type}!", reply_markup=KeyboardManager.admin_menu())
            else:
                bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=KeyboardManager.admin_menu())
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    def back_to_main_menu(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return
        
        BotHandler.show_main_menu(message.chat.id, user['is_admin'])

    @staticmethod
    @bot.message_handler(func=lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    def back_to_admin_panel(message):
        user_id = str(message.from_user.id)
        user = UserManager.get_user(user_id)
        
        if not user or not user['is_admin']:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
            return
        
        bot.send_message(message.chat.id, "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=KeyboardManager.admin_menu())

    @staticmethod
    def run():
        while True:
            try:
                print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                bot.polling(none_stop=True, interval=1, timeout=30)
            except ConnectionError:
                print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫...")
                time.sleep(10)
            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫...")
                time.sleep(30)

if __name__ == '__main__':
    BotHandler.run()
